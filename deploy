#!/bin/bash

# fix permissions on local dirs
chmod 777 ./auditlogs
chmod 666 ./auditlogs/audit.log

# # Password for the 'elastic' user (at least 6 characters)
# export ELASTIC_PASSWORD=elastic
# # Password for the 'kibana_system' user (at least 6 characters)
# export KIBANA_PASSWORD=kibana
# # Version of Elastic products
# export STACK_VERSION=8.1.2
# # Set the cluster name
# export CLUSTER_NAME=boundary-docker-cluster
# # Set to 'basic' or 'trial' to automatically start the 30-day trial
# export LICENSE=basic
# # Port to expose Elasticsearch HTTP API to the host
# export ES_PORT=127.0.0.1:19200
# # Port to expose Kibana to the host
# export KIBANA_PORT=5601
# # Increase or decrease based on the available host memory (in bytes)
# export MEM_LIMIT=1073741824

function cleanup() {
  pushd compose
  docker compose -p boundary rm -fs 
  popd
  pushd terraform/
  rm terraform.tfstate*
  popd
  exit 0
}
trap cleanup SIGKILL SIGINT

function init_compose() {
  pushd compose/
  docker compose --project-name boundary up -d
  popd
}

function init_terraform() {
  pushd terraform
  terraform init
  terraform apply -auto-approve
  popd
}

# Test with login to Boundary after provisioning
function login() {
  boundary authenticate password -login-name jeff -password foofoofoo -auth-method-id $(primary_org_ampw)
}

function primary_org_id() {
  strip $(boundary scopes list -format json | jq  -c '.[] | select(.name | contains("primary")) | .["id"]')
}

function primary_org_ampw() {
  strip $(boundary auth-methods list -scope-id $(primary_org_id) -format json | jq -c '.[]["id"]') 
}

function strip() {
  echo "$1" | tr -d '"'
}

for arg in "$@"
do
    case $arg in
        all)
        init_compose
        init_terraform
        shift
        ;;
        login)
        login
        shift
        ;;
        cleanup)
        cleanup
        shift
        ;;
        *)
        echo "cmd not found: try 'all', 'login', or 'cleanup'"
        shift
        ;;
    esac
done
